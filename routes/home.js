var express = require('express');
var router = express.Router();
var multer = require('multer');
var sanitizeHtml = require('sanitize-html');
var path = require('path');
var storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/')
    },
     filename: function(req, file, cb){
        cb(null, 'temp.txt')
     }
 });

var loggedin = function (req, res, next) {
   if (req.isAuthenticated()) {
       next()
   } else {
        res.redirect('/login')
    }
};


var upload = multer({storage: storage,
    fileFilter: function (req, file, cb) {
        let ext = path.extname(file.originalname);
        if (ext !== '.txt' && ext) {
            req.fileValidationError = "Forbidden extension";
            return cb(null, false, req.fileValidationError);
        }
        cb(null, true);
    }


});
var fs = require('fs');
var dateTime = require('node-datetime');



/* GET home page. */
router.get('/', loggedin, function(req, res, next) {
  res.render('home', {errors: req.session.errors });
  req.session.errors = null;
});


router.get('/reportdisplay', loggedin,  function(req, res, next) {
    if (fs.existsSync('./public/report')) {
        console.log('true');

        fs.readFile('./public/report', function (err, data) {
            if (err) {
                throw err;
            } else {
                  fs.unlinkSync('./public/report');
                res.setHeader('content-type', 'text/plain');
                res.send(data.toString());


            }
        });
    }else {
        res.send('no report to display');
    }


});




router.post('/submitfile', upload.single('fileU'), loggedin, function(req, res, next){
    if (req.fileValidationError) {
        console.log(req.fileValidationError);
        req.session.errors = req.fileValidationError
        res.redirect('/home');
    }else {
        var name = './public/report'


        var contents = fs.readFileSync('uploads/temp.txt', 'utf8').split('\n')


        var clean = sanitizeHtml(contents, {
            allowedTags: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',
                'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div',
                'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre', 'iframe', 'html', 'head', 'body', 'form', 'img'],
            allowedAttributes: false

        });

        var cleanHTML = JSON.stringify(clean);
        var PCH = cleanHTML.split(',');
        var arrayLength = PCH.length;




        fs.writeFile(name, 'CODE REPORT GENERATED BY SYSTEM\n', function (err) {
            if (err) throw err;
        });

        fs.appendFile(name, '\nCLEAN HTML \n\n', function (err) {
            if (err) throw err;
        });


        for (var i = 0; i < arrayLength; i++) {
            fs.appendFile(name, '\n' + PCH[i].toString(), function (err) {
                if (err) throw err;
            });
        }

        fs.appendFile(name, '\nVULNERABILITIES FOUND: \n\n', function (err) {
            if (err) throw err;
        });

        var iframeB = false;
        var srcB = false;
        var formB = false;
        var formAB = false;
        var formIB = false;
        var formCB = false;
        var autoB = false;


        for (var i = 0; i < arrayLength; i++) {
            if (PCH[i].includes('iframe')) {
                console.log('vunI');
                iframeB = true;
                fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                    if (err) throw err;
                })
            }
            if (PCH[i].includes('src')) {
                console.log('vunSRC');
                srcB = true;
                fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                    if (err) throw err;
                })

            }
            if (PCH[i].includes('form')) {
                console.log('vunFORM')
                formB = true;
                fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                    if (err) throw err;
                })

            }

            if (PCH[i].includes('onforminput')) {
                console.log('vunFORMI')
                formIB = true;
                fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                    if (err) throw err;
                })
            }
            if (PCH[i].includes('onformchange')) {
                console.log('vunFORMC')
                formAB = true;
                fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                    if (err) throw err;
                })
            }

            if (PCH[i].includes('autofocus')) {
                consfole.log('vunAUTO');
                autoB = true;
                fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                    if (err) throw err;
                })
            }
        }


        fs.unlinkSync('uploads/temp.txt');



        res.redirect('/home/reportdisplay');
    }

});



router.post('/submittext',loggedin, function(req, res, next){


    var name = './public/report';
    var text = req.body.textI.split('\r\n');
    var clean = sanitizeHtml(text, {
        allowedTags: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol',
            'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div',
            'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre', 'iframe', 'html', 'head', 'body', 'form', 'img'],
        allowedAttributes: false

    });
    var cleanHTML = JSON.stringify(clean);



    var PCH = cleanHTML.split(',');
    var arrayLength = PCH.length;




    fs.writeFile(name, 'CODE REPORT GENERATED BY SYSTEM\n', function(err){if(err) throw err;});

    fs.appendFile(name, '\nCLEAN HTML \n\n', function(err){if(err) throw err;});



    for(var i = 0; i < arrayLength; i++){
        fs.appendFile(name, '\n' + PCH[i].toString() , function(err){if(err) throw err;});
    }

    fs.appendFile(name, '\n\nVULNERABILITIES FOUND: \n\n', function (err) {if (err) throw err;});


    var iframeB = false;
    var srcB = false;
    var formB = false;
    var formAB = false;
    var formIB = false;
    var formCB = false;
    var autoB = false;


    for (var i = 0; i < arrayLength; i++) {
        if (PCH[i].includes('iframe')) {
            console.log('vunI');
            iframeB = true;
            fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                if (err) throw err;
            })
        }
        if (PCH[i].includes('src')) {
            console.log('vunSRC');
            srcB = true;
            fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                if (err) throw err;
            })

        }
        if (PCH[i].includes('form')) {
            console.log('vunFORM')
            formB = true;
            fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                if (err) throw err;
            })

        }




        if (PCH[i].includes('onforminput')) {
            console.log('vunFORMI')
            formIB = true;
            fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                if (err) throw err;
            })
        }
        if (PCH[i].includes('onformchange')) {
            console.log('vunFORMC')
            formAB = true;
            fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                if (err) throw err;
            })
        }

        if (PCH[i].includes('autofocus')) {
            consfole.log('vunAUTO');
            autoB = true;
            fs.appendFile(name, '\n\nVenerability found at line:' + i + '\nof type:' + PCH[i].toString(), function (err) {
                if (err) throw err;
            })
        }
    }

    //  res.send('test');


    res.redirect('/home/reportdisplay');




});



router.get('/logout', function (req, res) {
    req.logout()
    res.redirect('/')
})


module.exports = router;